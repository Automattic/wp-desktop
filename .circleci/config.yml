version: 2

references:
  restore_nvm: &restore_nvm
    restore_cache:
      name: Restoring NVM cache
      keys:
        - v1-nvm-0-33-11-{{ arch }}-{{ checksum "calypso/.nvmrc" }}
        - v1-nvm-0-33-11-{{ arch }}
  setup_nvm: &setup_nvm
    run:
      name: Install nvm and calypso node version
      command: |
        set +e
        set +u
        set +x
        NODE_VERSION=$(cat calypso/.nvmrc)
        export NVM_DIR="${HOME}/.nvm"
        mkdir -p "$NVM_DIR"

        if [ ! -f "${NVM_DIR}/nvm.sh" ]; then
          curl -o- https://raw.githubusercontent.com/creationix/nvm/v0.33.11/install.sh | bash
        fi

        [ -s "${NVM_DIR}/nvm.sh" ] && \. "$NVM_DIR/nvm.sh"
        nvm install "$NODE_VERSION"
        nvm alias default "$NODE_VERSION"
        nvm use "$NODE_VERSION"
  save_nvm: &save_nvm
    save_cache:
      name: Saving NVM cache
      key: v1-nvm-0-33-11-{{ arch }}-{{ checksum "calypso/.nvmrc" }}
      paths:
        - ~/.nvm
  decrypt_assets: &decrypt_assets
    run:
      name: Decrypt assets
      command: |
              openssl aes-256-cbc -md md5 -d -in resource/calypso/secrets.json.enc -out calypso/config/secrets.json -k "${CALYPSO_SECRETS_ENCRYPTION_KEY}"
              openssl aes-256-cbc -md md5 -d -in resource/certificates/mac.p12.enc -out resource/certificates/mac.p12 -k "${CALYPSO_SECRETS_ENCRYPTION_KEY}"
              openssl aes-256-cbc -md md5 -d -in resource/certificates/win.p12.enc -out resource/certificates/win.p12 -k "${CALYPSO_SECRETS_ENCRYPTION_KEY}"
  npm_restore_cache: &npm_restore_cache
    restore_cache:
      name: Restore npm cache
      keys:
        - v2-npm-{{ arch }}-{{ checksum "calypso/.nvmrc" }}-{{ checksum "package-lock.json" }}-{{ checksum "calypso/npm-shrinkwrap.json" }}
        - v2-npm-{{ arch }}-{{ checksum "calypso/.nvmrc" }}-{{ checksum "package-lock.json" }}
        - v2-npm-{{ arch }}-{{ checksum "calypso/.nvmrc" }}
  npm_save_cache: &npm_save_cache
    save_cache:
      name: Save npm cache
      key: v2-npm-{{ arch }}-{{ checksum "calypso/.nvmrc" }}-{{ checksum "package-lock.json" }}-{{ checksum "calypso/npm-shrinkwrap.json" }}
      paths:
        - ~/.npm
  npm_install: &npm_install
    run:
      name: Npm install
      command: |
              source $HOME/.nvm/nvm.sh
              nvm use
              npm ci
              cd calypso
              npm ci
  install_linux_dependencies: &install_linux_dependencies
    run:
      name: Install linux dev dependencies
      command: |
        sudo apt-get update
        sudo apt-get -y install libxkbfile-dev libxss-dev uuid-runtime
  app_cache_paths: &app_cache_paths
    - calypso-hash
    - build
    - resource/certificates/win.p12
    - resource/certificates/mac.p12
    - calypso/public
    - calypso/server
    - calypso/config
    - calypso/package.json
    - calypso/packages
    - calypso/npm-shrinkwrap.json
    - calypso/.nvmrc
  setup_calypso: &setup_calypso
    run:
      name: Setup calypso
      command: |
              git submodule init
              git submodule update

              if [ -n "${CALYPSO_HASH}" ]; then
                cd calypso;
                git fetch;
                git checkout ${CALYPSO_HASH};
              fi
  calypso_prepare_cache: &calypso_prepare_cache
    run:
      name: Prepare calypso cache
      command: |
              if [ -n "${CALYPSO_HASH}" ]; then
                # cache bust e2e tests
                uuidgen > calypso-current-hash
              else
                git rev-parse @:./calypso > calypso-current-hash
              fi
  calypso_restore_cache: &calypso_restore_cache
    restore_cache:
      name: Restore calypso cache
      keys:
        - v6-calypso-{{ .Environment.CIRCLE_JOB }}-{{ arch }}-{{ checksum "calypso-current-hash" }}
  calypso_finalize_cache: &calypso_finalize_cache
    run:
      name: Finalize calypso cache
      command: |
              if [ "$(cat calypso-current-hash)" != "$(cat calypso-hash)" ]; then
                cp calypso-current-hash calypso-hash
              fi
  calypso_save_cache: &calypso_save_cache
    save_cache:
      name: Save calypso cache
      key: v6-calypso-{{ .Environment.CIRCLE_JOB }}-{{ arch }}-{{ checksum "calypso-current-hash" }}
      paths: *app_cache_paths
  build_sources: &build_sources
    run:
        name: Build sources
        no_output_timeout: 30m
        command: |
                source $HOME/.nvm/nvm.sh
                nvm use

                # only build the whole bundle when there is no calypso-hash file
                if [ "$(cat calypso-current-hash)" != "$(cat calypso-hash)" ]; then
                  make build-source CONFIG_ENV=$CONFIG_ENV EMIT_STATS=false MINIFY_JS=$MINIFY_JS NODE_ARGS="$NODE_ARGS"
                else
                  make desktop/config.json CONFIG_ENV=$CONFIG_ENV
                  make build-desktop
                fi
  test: &test
    run:
      name: Test
      command: |
              set +e

              # At this stage, we can only do canary tests when CONFIG_ENV=test as the electron binary is not signed
              # TODO: We might be able to ignore this once we switched to electron-builders auto-update
              if [ "$CONFIG_ENV" == "test" ]; then
                source $HOME/.nvm/nvm.sh
                nvm use
                make test
              fi
  webhook_notify_success: &webhook_notify_success
    run:
      name: Notify webhook of successful build
      when: on_success
      command: |
          set +o errexit
          if [[ $CIRCLE_BRANCH != "tests/"* ]]; then
            exit
          fi
          curl -X POST "https://a8c-gh-desktop-bridge.go-vip.co/circleciwebhook" \
          -H 'Cache-Control: no-cache'	\
          -H 'Content-Type: application/json'	\
          -d '{
              "payload": {
                "outcome": "'"success"'",
                "status": "'"success"'",
                "branch": "'"$BRANCHNAME"'",
                "build_url": "'"$CIRCLE_BUILD_URL"'",
                "build_parameters": {
                  "build_num": '"$CIRCLE_BUILD_NUM"',
                  "sha": "'"$sha"'",
                  "calypsoProject": "'"$calypsoProject"'"
                }
              }
          }'
  webhook_notify_failed: &webhook_notify_failed
    run:
      name: Notify webhook of failed build
      when: on_fail
      command: |
        set +o errexit
        if [[ $BRANCHNAME != "tests/"* ]]; then
          exit
        fi
        curl -X POST "https://a8c-gh-desktop-bridge.go-vip.co/circleciwebhook" \
        -H 'Cache-Control: no-cache'	\
        -H 'Content-Type: application/json'	\
        -d '{
          "payload": {
            "outcome": "'"failed"'",
            "status": "'"failed"'",
            "branch": "'"$BRANCHNAME"'",
            "build_url": "'"$CIRCLE_BUILD_URL"'",
            "build_parameters": {
              "build_num": '"$CIRCLE_BUILD_NUM"',
              "sha": "'"$sha"'",
              "calypsoProject": "'"$calypsoProject"'"
            }
          }
        }'

jobs:
  build:
    docker:
      - image: circleci/node:10.14.0-browsers
    working_directory: ~/wp-desktop
    environment:
      CONFIG_ENV: release
      MINIFY_JS: true
      NODE_ARGS: --max_old_space_size=2048
    steps:
      - checkout
      - *install_linux_dependencies
      - *setup_calypso
      - *calypso_prepare_cache
      - *calypso_restore_cache
      - *restore_nvm
      - *setup_nvm
      - *save_nvm
      - *decrypt_assets
      - *npm_restore_cache
      - *npm_install
      - *npm_save_cache
      - *build_sources
      - *test
      - *calypso_finalize_cache
      - *calypso_save_cache
      - *webhook_notify_success
      - *webhook_notify_failed
      - persist_to_workspace:
          root: ~/wp-desktop
          paths: *app_cache_paths

  linux:
    docker:
      - image: circleci/node:10.14.0-browsers
    working_directory: ~/wp-desktop
    steps:
      - checkout
      - attach_workspace:
          at: ~/wp-desktop
      - *restore_nvm
      - *setup_nvm
      - *save_nvm
      - *npm_restore_cache
      - *install_linux_dependencies
      - run:
          name: Npm install
          command: |
            source $HOME/.nvm/nvm.sh
            nvm use
            npm ci
      - *npm_save_cache
      - run:
          name: Build Linux
          environment:
            CSC_LINK: resource/certificates/win.p12
          command: |
                  source $HOME/.nvm/nvm.sh
                  nvm use
                  make package BUILD_PLATFORM=l
      - run:
          name: Release cleanup
          command: |
                  set +e
                  rm -rf release/github
                  rm -rf release/linux-unpacked
      - persist_to_workspace:
          root: ~/wp-desktop
          paths:
            - release

  mac:
    macos:
      xcode: "9.0"
    shell: /bin/bash --login
    working_directory: /Users/distiller/wp-desktop
    steps:
      - checkout
      - attach_workspace:
          at: /Users/distiller/wp-desktop
      - *restore_nvm
      - *setup_nvm
      - *save_nvm
      - *npm_restore_cache
      - run:
          name: Npm install
          command: |
            source $HOME/.nvm/nvm.sh
            nvm use
            npm ci
      - *npm_save_cache
      - run:
          name: Build Mac
          environment:
            CSC_LINK: resource/certificates/mac.p12
            CSC_FOR_PULL_REQUEST: true # don't do this in production
          command: |
                  set +e
                  source $HOME/.nvm/nvm.sh
                  nvm use
                  make package BUILD_PLATFORM=m
      # Temporarily disable the test
      # TODO: Fixme â€“ seems to be an issue with `portscanner`
      # - run:
      #     name: Test
      #     command: |
      #             source $HOME/.nvm/nvm.sh
      #             nvm use
      #             make test TEST_PRODUCTION_BINARY=true
      - run:
          name: e2e Tests
          command: |
                  killall touristd
                  killall UserNotificationCenter
                  export BINARY_PATH="./release/mac/WordPress.com.app/Contents/MacOS/WordPress.com"
                  ./node_modules/.bin/chromedriver >/dev/null 2>&1 &
                  ./node_modules/.bin/mocha test/tests/e2e.js
      - run:
          name: Release cleanup
          command: |
                  set +e
                  rm -rf release/github
                  rm -rf release/mac
      - persist_to_workspace:
          root: /Users/distiller/wp-desktop
          paths:
            - release
      - store_artifacts:
          path: screenshots/

  artifacts:
    docker:
      - image: buildpack-deps:trusty
    working_directory: /wp-desktop
    steps:
      - attach_workspace:
          at: /wp-desktop
      - store_artifacts:
          path: release


workflows:
  version: 2
  wp-desktop:
    jobs:
      - build:
          filters:
            branches:
              ignore: /tests\/.*/
            tags:
              only: /.*/
      - linux:
          requires:
          - build
          filters:
            branches:
              ignore: /tests\/.*/
            tags:
              only: /.*/
      - mac:
          requires:
          - build
          filters:
            branches:
              ignore: /tests\/.*/
            tags:
              only: /.*/
      - artifacts:
          requires:
            - linux
            - mac
          filters:
            branches:
              ignore: /tests\/.*/
            tags:
              only: /.*/
