version: 2.1

# Circle API v2 build trigger parameters
# Ref: https://circleci.com/docs/2.0/pipeline-variables/
# Ref: https://circleci.com/docs/2.0/reusing-config/#parameter-syntax
parameters:
  CALYPSO_HASH:
    type: string
    default: ""
  sha:
    type: string
    default: ""
  calypsoProject:
    type: string
    default: ""
  isCalypsoCanaryRun:
    type: boolean
    default: false
  pullRequestUserName:
    type: string
    default: ""
  pullRequestNum:
    type: string
    default: ""

orbs:
  win: circleci/windows@2.2.0

references:
  restore_nvm: &restore_nvm
    restore_cache:
      name: Restoring NVM cache
      keys:
        - v1-nvm-0-33-11-{{ .Environment.CACHE_VERSION }}-{{ arch }}-{{ checksum "calypso/.nvmrc" }}
        - v1-nvm-0-33-11-{{ .Environment.CACHE_VERSION }}-{{ arch }}
  setup_nvm: &setup_nvm
    run:
      name: Install nvm and calypso node version
      command: |
        set +e
        set +u
        set +x
        NODE_VERSION=$(cat calypso/.nvmrc)
        export NVM_DIR="${HOME}/.nvm"
        mkdir -p "$NVM_DIR"

        if [ ! -f "${NVM_DIR}/nvm.sh" ]; then
          curl -o- https://raw.githubusercontent.com/creationix/nvm/v0.33.11/install.sh | bash
        fi

        [ -s "${NVM_DIR}/nvm.sh" ] && \. "$NVM_DIR/nvm.sh"
        nvm install "$NODE_VERSION"
        nvm alias default "$NODE_VERSION"
        nvm use "$NODE_VERSION"
        cp calypso/.nvmrc .
  save_nvm: &save_nvm
    save_cache:
      name: Saving NVM cache
      key: v1-nvm-0-33-11-{{ .Environment.CACHE_VERSION }}-{{ arch }}-{{ checksum "calypso/.nvmrc" }}
      paths:
        - ~/.nvm
  decrypt_assets: &decrypt_assets
    run:
      name: Decrypt assets
      command: |
              openssl aes-256-cbc -md md5 -d -in resource/calypso/secrets.json.enc -out calypso/config/secrets.json -k "${CALYPSO_SECRETS_ENCRYPTION_KEY}"
              openssl aes-256-cbc -md md5 -d -in resource/certificates/mac.p12.enc -out resource/certificates/mac.p12 -k "${CALYPSO_SECRETS_ENCRYPTION_KEY}"
              openssl aes-256-cbc -md md5 -d -in resource/certificates/win.p12.enc -out resource/certificates/win.p12 -k "${CALYPSO_SECRETS_ENCRYPTION_KEY}"
  restore_node_module_cache: &restore_node_module_cache
    restore_cache:
      name: Restore Node Module Cache
      keys:
        - v2-npm-{{ .Environment.CACHE_VERSION }}-{{ arch }}-{{ checksum "calypso/.nvmrc" }}-{{ checksum "yarn.lock" }}-{{ checksum "calypso/yarn.lock" }}
        - v2-npm-{{ .Environment.CACHE_VERSION }}-{{ arch }}-{{ checksum "calypso/.nvmrc" }}-{{ checksum "yarn.lock" }}
        - v2-npm-{{ .Environment.CACHE_VERSION }}-{{ arch }}-{{ checksum "calypso/.nvmrc" }}
  save_node_module_cache: &save_node_module_cache
    save_cache:
      name: Save node module cache
      key: v2-npm-{{ arch }}-{{ checksum "calypso/.nvmrc" }}-{{ checksum "yarn.lock" }}-{{ checksum "calypso/yarn.lock" }}
      paths:
        - $HOME/.config/yarn/global
  install_node_modules: &install_node_modules
    run:
      name: Install Node Modules
      command: |
              source $HOME/.nvm/nvm.sh
              nvm use
              yarn install --frozen-lockfile
              cd calypso
              yarn install --frozen-lockfile
  install_linux_dependencies: &install_linux_dependencies
    run:
      name: Install linux dev dependencies
      command: |
        sudo apt-get update
        sudo apt-get -y install libxkbfile-dev libxss-dev libxext-dev libx11-dev uuid-runtime
  app_cache_paths: &app_cache_paths
    - calypso-hash
    - build
    - resource/certificates/win.p12
    - resource/certificates/mac.p12
    - calypso/public
    - calypso/client/server
    - calypso/config
    - calypso/package.json
    - calypso/packages
    - calypso/yarn.lock
    - calypso/.nvmrc
  setup_calypso: &setup_calypso
    run:
      name: Setup calypso
      command: |
              git submodule init
              git submodule update

              if [ -n "${CALYPSO_HASH}" ]; then
                cd calypso;
                git fetch;
                git checkout ${CALYPSO_HASH};
              fi
  calypso_prepare_cache: &calypso_prepare_cache
    run:
      name: Prepare calypso cache
      command: |
              if [ -n "${CALYPSO_HASH}" ]; then
                # cache bust e2e tests
                uuidgen > calypso-current-hash
              else
                git rev-parse @:./calypso > calypso-current-hash
              fi
  calypso_restore_cache: &calypso_restore_cache
    restore_cache:
      name: Restore calypso cache
      keys:
        - v6-calypso-{{ .Environment.CACHE_VERSION }}-{{ .Environment.CIRCLE_JOB }}-{{ arch }}-{{ checksum "calypso-current-hash" }}
  calypso_finalize_cache: &calypso_finalize_cache
    run:
      name: Finalize calypso cache
      command: |
              if [ "$(cat calypso-current-hash)" != "$(cat calypso-hash)" ]; then
                cp calypso-current-hash calypso-hash
              fi
  calypso_save_cache: &calypso_save_cache
    save_cache:
      name: Save calypso cache
      key: v6-calypso-{{ .Environment.CACHE_VERSION }}-{{ .Environment.CIRCLE_JOB }}-{{ arch }}-{{ checksum "calypso-current-hash" }}
      paths: *app_cache_paths
  build_sources: &build_sources
    run:
        name: Build sources
        no_output_timeout: 30m
        command: |
                source $HOME/.nvm/nvm.sh
                nvm use

                # only build the whole bundle when there is no calypso-hash file
                if [ "$(cat calypso-current-hash)" != "$(cat calypso-hash)" ]; then
                  make build-source CONFIG_ENV=$CONFIG_ENV EMIT_STATS=false MINIFY_JS=$MINIFY_JS NODE_ARGS="$NODE_ARGS"
                else
                  make desktop/config.json CONFIG_ENV=$CONFIG_ENV
                  make build-desktop
                fi
  test: &test
    run:
      name: Test
      command: |
              set +e

              # At this stage, we can only do canary tests when CONFIG_ENV=test as the electron binary is not signed
              # TODO: We might be able to ignore this once we switched to electron-builders auto-update
              if [ "$CONFIG_ENV" == "test" ]; then
                source $HOME/.nvm/nvm.sh
                nvm use
                make test
              fi
  webhook_notify_success: &webhook_notify_success
    run:
      name: Notify webhook of successful build
      when: on_success
      command: |
          set +o errexit
          if [[ $CIRCLE_BRANCH != "tests/"* ]]; then
            exit
          fi
          curl -X POST "https://a8c-gh-desktop-bridge.go-vip.co/circleciwebhook" \
          -H 'Cache-Control: no-cache'	\
          -H 'Content-Type: application/json'	\
          -d '{
              "payload": {
                "outcome": "'"success"'",
                "status": "'"success"'",
                "branch": "'"$CIRCLE_BRANCH"'",
                "build_url": "'"$CIRCLE_BUILD_URL"'",
                "build_parameters": {
                  "build_num": '"$CIRCLE_BUILD_NUM"',
                  "sha": "'"$sha"'",
                  "calypsoProject": "'"$calypsoProject"'",
                  "pullRequestNum": "'"$pullRequestNum"'",
                  "pullRequestUserName": "'"$pullRequestUserName"'"
                }
              }
          }'
  webhook_notify_failed: &webhook_notify_failed
    run:
      name: Notify webhook of failed build
      when: on_fail
      command: |
        set +o errexit
        if [[ $CIRCLE_BRANCH != "tests/"* ]]; then
          exit
        fi
        curl -X POST "https://a8c-gh-desktop-bridge.go-vip.co/circleciwebhook" \
        -H 'Cache-Control: no-cache'	\
        -H 'Content-Type: application/json'	\
        -d '{
            "payload": {
              "outcome": "'"failed"'",
              "status": "'"failed"'",
              "branch": "'"$CIRCLE_BRANCH"'",
              "build_url": "'"$CIRCLE_BUILD_URL"'",
              "build_parameters": {
                "build_num": '"$CIRCLE_BUILD_NUM"',
                "sha": "'"$sha"'",
                "calypsoProject": "'"$calypsoProject"'",
                "pullRequestNum": "'"$pullRequestNum"'",
                "pullRequestUserName": "'"$pullRequestUserName"'"
              }
            }
        }'

jobs:
  validate_version:
    docker:
      - image: circleci/node:12.18.3-browsers
    environment:
      VERSION: << pipeline.git.tag >>
    steps:
      - when:
          condition: << pipeline.git.tag >>
          steps:
            - checkout
            - run:
                name: Ensure package.json Version And Tag Match
                command: node ./validate_tag.js $VERSION
      - unless:
          condition: << pipeline.git.tag >>
          steps:
            - run:
                name: Skip Validation
                command: echo "Not on a tag. Skipping version validation."

  build:
    docker:
      - image: circleci/node:12.18.3-browsers
    working_directory: ~/wp-desktop
    environment:
      CONFIG_ENV: release
      MINIFY_JS: true
      NODE_ARGS: --max_old_space_size=3072
      CALYPSO_HASH: << pipeline.parameters.CALYPSO_HASH >>
      sha: << pipeline.parameters.sha >>
      calypsoProject: << pipeline.parameters.calypsoProject >>
      pullRequestUserName: << pipeline.parameters.pullRequestUserName >>
      pullRequestNum: << pipeline.parameters.pullRequestNum >>
    steps:
      - checkout
      - *install_linux_dependencies
      - *setup_calypso
      - *calypso_prepare_cache
      - *calypso_restore_cache
      - *restore_nvm
      - *setup_nvm
      - *save_nvm
      - *decrypt_assets
      - *restore_node_module_cache
      - *install_node_modules
      - *save_node_module_cache
      - *build_sources
      - *test
      - *calypso_finalize_cache
      - *calypso_save_cache
      - *webhook_notify_failed
      - persist_to_workspace:
          root: ~/wp-desktop
          paths: *app_cache_paths

  linux:
    docker:
      - image: circleci/node:12.18.3-browsers
    working_directory: ~/wp-desktop
    steps:
      - checkout
      - attach_workspace:
          at: ~/wp-desktop
      - *restore_nvm
      - *setup_nvm
      - *save_nvm
      - *restore_node_module_cache
      - *install_linux_dependencies
      - run:
          name: Install Node Modules
          command: |
            source $HOME/.nvm/nvm.sh
            nvm use
            yarn install --frozen-lockfile
      - *save_node_module_cache
      - run:
          name: Build Linux
          environment:
            CSC_LINK: resource/certificates/win.p12
          command: |
                  source $HOME/.nvm/nvm.sh
                  nvm use

                  # Build all artifacts only when project config changes.
                  # Otherwise only build application executable required for end-to-end testing.
                  ! git diff --name-only origin/develop...HEAD | grep -E -q 'package.json|yarn.lock' && ELECTRON_BUILDER_ARGS='-c.linux.target=dir'

                  make package ELECTRON_BUILDER_ARGS=$ELECTRON_BUILDER_ARGS
      - run:
          name: e2e Tests
          command: make e2e
      - run:
          name: Persist Linux Executable
          command: |
                  # If this isn't a full artifact build, ensure to persist the built application for inspection
                  test -f release/*.tar.gz || tar -zcf release/linux-unpacked.tar.gz release/linux-unpacked
      - run:
          name: Release cleanup
          command: |
                  set +e
                  rm -rf release/github
                  rm -rf release/linux-unpacked
      - persist_to_workspace:
          root: ~/wp-desktop
          paths:
            - release

  windows:
    executor:
      name: win/default
    working_directory: C:\Users\circleci\wp-desktop
    environment:
      CSC_LINK: .\resource\certificates\win.p12
      CSC_FOR_PULL_REQUEST: true
    steps:
      - checkout
      - attach_workspace:
          at: C:\Users\circleci\wp-desktop
      - run:
          name: Install make
          command: cinst make
      - run:
          name: Install Node Version
          command: |
                  $NODE_VERSION = Get-Content .\calypso\.nvmrc
                  nvm install $NODE_VERSION
                  nvm use $NODE_VERSION
      - run:
          name: Install Yarn
          command: npm install -g yarn
      - run:
          name: Install Node Modules
          command: |
                yarn install --frozen-lockfile
      - run:
          name: Build windows
          command: |
                # Workaround for Sign Tool "private key filter" bug in Circle's Windows image.
                # Ref: https://travis-ci.community/t/codesigning-on-windows/
                #
                # Fix: Import .p12 into the local certificate store. Sign Tool will use
                # package.json's `certificateSubjectName` to find the imported cert.
                Import-PfxCertificate -FilePath $env:CSC_LINK -CertStoreLocation Cert:\LocalMachine\Root -Password (ConvertTo-SecureString -String $env:WIN_CSC_KEY_PASSWORD -AsPlainText -Force)

                # $env:CSC_KEY_PASSWORD=$env:WIN_CSC_KEY_PASSWORD

                # Build all artifacts only when project config changes.
                # Otherwise only build application executable required for end-to-end testing.
                $env:ARG1='-c.win.certificateSubjectName=""Automattic, Inc.""'
                If ( -Not $(git diff --name-only origin/develop...HEAD | Select-String -Pattern package.json,yarn.lock) ) { $env:ARG2='-c.win.target=dir' }

                make package ELECTRON_BUILDER_ARGS=$($env:ARG1,$env:ARG2 -join " ")
      - run:
          name: Archive win-unpacked directories
          command: |
                tar -zcf release/win-unpacked-x64.tar.gz release/win-unpacked

                # If this isn't a full artifact build, the win-ia32-unpacked executable will not be generated
                If ( $(Test-Path -Path release\win-ia32-unpacked) ) {
                  tar -zcf release/win-unpacked-ia32.tar.gz release/win-ia32-unpacked
                } else {
                  echo "'release\win-ia32-unpacked' not built, skipping tar archive..."
                }
      - run:
          name: Release cleanup
          command: |
                rm -rf release/github
                rm -rf release/win-unpacked
                rm -rf release/win-ia32-unpacked/
          shell: bash.exe
      - persist_to_workspace:
          root: C:\Users\circleci\wp-desktop
          paths:
            - release

  mac:
    macos:
      xcode: "10.1.0"
    shell: /bin/bash --login
    working_directory: /Users/distiller/wp-desktop
    environment:
      sha: << pipeline.parameters.sha >>
      calypsoProject: << pipeline.parameters.calypsoProject >>
    steps:
      - checkout
      - attach_workspace:
          at: /Users/distiller/wp-desktop
      - *restore_nvm
      - *setup_nvm
      - *save_nvm
      - *restore_node_module_cache
      - run:
          name: Install Node Modules
          command: |
            source $HOME/.nvm/nvm.sh
            nvm use
            yarn install --frozen-lockfile
      - *save_node_module_cache
      - run:
          name: Build Mac
          no_output_timeout: 30m
          environment:
            CSC_LINK: resource/certificates/mac.p12
            CSC_FOR_PULL_REQUEST: true # don't do this in production
          command: |
                  set +e
                  source $HOME/.nvm/nvm.sh
                  nvm use

                  # Build all artifacts only when project config changes.
                  # Otherwise only build application executable required for end-to-end testing.
                  ! git diff --name-only origin/develop...HEAD | grep -E -q 'package.json|yarn.lock' && ELECTRON_BUILDER_ARGS='-c.mac.target=dir'

                  make package ELECTRON_BUILDER_ARGS=$ELECTRON_BUILDER_ARGS
      # Temporarily disable the test
      # TODO: Fixme – seems to be an issue with `portscanner`
      # - run:
      #     name: Test
      #     command: |
      #             source $HOME/.nvm/nvm.sh
      #             nvm use
      #             make test TEST_PRODUCTION_BINARY=true
      - run:
          name: e2e Tests
          command: |
                  killall touristd
                  killall UserNotificationCenter

                  make e2e
      - run:
          name: Persist Mac Executable
          command: |
                  # If this isn't a full artifact build, ensure to persist the built application for inspection
                  test -f release/*.zip || ditto -ck --rsrc --sequesterRsrc release/mac release/mac.app.zip
      - run:
          name: Release cleanup
          command: |
                  set +e
                  rm -rf release/github
                  rm -rf release/mac
      - persist_to_workspace:
          root: /Users/distiller/wp-desktop
          paths:
            - release
      - store_artifacts:
          path: screenshots/
      - store_artifacts:
          path: test/logs/

  mac-canary:
    macos:
      xcode: "10.1.0"
    shell: /bin/bash --login
    working_directory: /Users/distiller/wp-desktop
    environment:
      sha: << pipeline.parameters.sha >>
      calypsoProject: << pipeline.parameters.calypsoProject >>
      pullRequestUserName: << pipeline.parameters.pullRequestUserName >>
      pullRequestNum: << pipeline.parameters.pullRequestNum >>
    steps:
      - checkout
      - attach_workspace:
          at: /Users/distiller/wp-desktop
      - *restore_nvm
      - *setup_nvm
      - *save_nvm
      - *restore_node_module_cache
      - run:
          name: Install Node Modules
          command: |
            source $HOME/.nvm/nvm.sh
            nvm use
            yarn install --frozen-lockfile
      - *save_node_module_cache
      - run:
          name: Build Mac
          no_output_timeout: 30m
          environment:
            CSC_LINK: resource/certificates/mac.p12
            CSC_FOR_PULL_REQUEST: true # don't do this in production
          command: |
                  set +e
                  source $HOME/.nvm/nvm.sh
                  nvm use

                  # Build all artifacts only when project config changes.
                  # Otherwise only build application executable required for end-to-end testing.
                  ! git diff --name-only origin/develop...HEAD | grep -E -q 'package.json|yarn.lock' && ELECTRON_BUILDER_ARGS='-c.mac.target=dir'

                  make package ELECTRON_BUILDER_ARGS=$ELECTRON_BUILDER_ARGS
      - run:
          name: e2e Tests
          command: |
                  killall touristd
                  killall UserNotificationCenter

                  make e2e
      - run:
          name: Persist Mac Executable
          command: |
                  # If this isn't a full artifact build, ensure to persist the built application for inspection
                  test -f release/*.zip || ditto -ck --rsrc --sequesterRsrc release/mac release/mac.app.zip
      - run:
          name: Release cleanup
          command: |
                  set +e
                  rm -rf release/github
                  rm -rf release/mac
      - *webhook_notify_success
      - *webhook_notify_failed
      - persist_to_workspace:
          root: /Users/distiller/wp-desktop
          paths:
            - release
      - store_artifacts:
          path: screenshots/
      - store_artifacts:
          path: test/logs/

  artifacts:
    docker:
      - image: buildpack-deps:trusty
    working_directory: /wp-desktop
    steps:
      - attach_workspace:
          at: /wp-desktop
      - run:
          name: Cleaning Up
          command: |
            find release -type f -name "._*" -delete
            rm -rf release/.icon-set
      - persist_to_workspace:
          root: /wp-desktop
          paths:
            - release
      - store_artifacts:
          path: release

  publish:
    docker:
      - image: circleci/golang:1.12
    working_directory: /home/circleci/wp-desktop
    environment:
      VERSION: << pipeline.git.tag >>
    steps:
      - when:
          condition: << pipeline.git.tag >>
          steps:
            - checkout
            - attach_workspace:
                at: /home/circleci/wp-desktop
            - run:
                name: Install Dependencies
                command: go get github.com/tcnksm/ghr
            - run:
                name: Publish Github Release
                command: |
                  echo "Publishing draft release for $VERSION..."

                  NAME=${VERSION#?}

                  chmod +x make-changelog.sh
                  ./make-changelog.sh > CHANGELOG.md

                  ghr \
                    --token $GH_TOKEN \
                    --username $CIRCLE_PROJECT_USERNAME \
                    --repository $CIRCLE_PROJECT_REPONAME \
                    --commitish $CIRCLE_SHA1 \
                    --name $NAME \
                    --body "$(cat CHANGELOG.md)" \
                    --delete \
                    --draft \
                    $VERSION release/

                  echo "Publish complete"
      - unless:
          condition: << pipeline.git.tag >>
          steps:
            - run:
                name: Skip Publish
                command: echo "Not on a tag, skipping publish"

workflows:
  version: 2
  wp-desktop:
    unless: << pipeline.parameters.isCalypsoCanaryRun >>
    jobs:
      - validate_version:
          filters:
            branches:
              ignore: /tests\/.*/
            tags:
              only: /.*/
      - build:
          requires:
          - validate_version
          filters:
            branches:
              ignore: /tests\/.*/
            tags:
              only: /.*/
      - windows:
          requires:
          - build
          filters:
            branches:
              ignore: /tests\/.*/
            tags:
              only: /.*/
      - linux:
          requires:
          - build
          filters:
            branches:
              ignore: /tests\/.*/
            tags:
              only: /.*/
      - mac:
          requires:
          - build
          filters:
            branches:
              ignore: /tests\/.*/
            tags:
              only: /.*/
      - artifacts:
          requires:
            - windows
            - linux
            - mac
          filters:
            branches:
              ignore: /tests\/.*/
            tags:
              only: /.*/
      - publish:
          requires:
            - artifacts
          filters:
            branches:
              ignore: /tests\/.*/
            tags:
              only: /.*/
  calypso-canary:
    when: << pipeline.parameters.isCalypsoCanaryRun >>
    jobs:
      - build:
          filters:
            branches:
              only: /tests\/.*/
              ignore: tests/import/wp-desktop
      - mac-canary:
          requires:
            - build
          filters:
            branches:
              only: /tests\/.*/
      - artifacts:
          requires:
            - mac-canary
          filters:
            branches:
              ignore: /tests\/.*/
